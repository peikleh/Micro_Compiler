
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E36E004EC54C1DFC2B147A4DDCB80A8D'
    
_lr_action_items = {'ENDWHILE':([6,8,14,17,25,26,45,57,63,64,65,68,69,70,72,75,76,84,90,115,117,125,126,132,141,143,],[-6,-76,-76,-5,-4,-9,-7,-34,-32,-28,-35,-29,-30,-33,-76,-31,-36,-27,-40,-76,-38,-76,-39,141,-74,-62,]),'READ':([6,8,14,17,25,26,45,51,54,57,63,65,68,69,70,72,75,76,90,114,115,117,124,125,126,137,140,141,143,144,],[-6,-76,-76,-5,-4,-9,-7,-76,59,-34,-32,-35,-29,-30,-33,59,-31,-36,-40,-76,-76,-38,59,59,-39,-66,-76,-74,-62,59,]),'ENDIF':([6,8,14,17,25,26,45,57,63,64,65,68,69,70,72,75,76,84,90,114,117,124,126,131,137,138,139,140,141,143,144,146,],[-6,-76,-76,-5,-4,-9,-7,-34,-32,-28,-35,-29,-30,-33,-76,-31,-36,-27,-40,-76,-38,-76,-39,-76,-66,-65,143,-76,-74,-62,-76,-64,]),'FUNCTION':([5,6,8,13,14,17,24,25,26,45,56,],[-76,-6,-76,21,-76,-5,21,-4,-9,-7,-24,]),'RETURN':([6,8,14,17,25,26,45,51,54,57,63,65,68,69,70,72,75,76,90,114,115,117,124,125,126,137,140,141,143,144,],[-6,-76,-76,-5,-4,-9,-7,-76,60,-34,-32,-35,-29,-30,-33,60,-31,-36,-40,-76,-76,-38,60,60,-39,-66,-76,-74,-62,60,]),'COMM':([3,16,36,42,46,52,87,100,101,102,104,105,106,127,130,133,142,],[-2,28,28,50,-19,50,-41,-48,-47,-44,-55,-56,-57,-54,136,-49,136,]),'STRINGLITERAL':([30,],[38,]),'MORE':([3,87,91,100,101,102,104,105,106,127,133,],[-2,-41,110,-48,-47,-44,-55,-56,-57,-54,-49,]),'IF':([6,8,14,17,25,26,45,51,54,57,63,65,68,69,70,72,75,76,90,114,115,117,124,125,126,137,140,141,143,144,],[-6,-76,-76,-5,-4,-9,-7,-76,71,-34,-32,-35,-29,-30,-33,71,-31,-36,-40,-76,-76,-38,71,71,-39,-66,-76,-74,-62,71,]),'MULT':([3,100,101,102,104,105,106,127,133,],[-2,-48,-47,118,-55,-56,-57,-54,-49,]),'R_PAR':([3,16,27,29,34,36,41,42,43,44,46,48,49,52,55,86,87,92,94,95,100,101,102,104,105,106,121,122,123,127,128,129,130,133,134,135,142,145,],[-2,-76,-14,-16,-76,-76,47,-76,-18,-15,-19,-17,-21,-76,-20,96,-41,114,115,116,-48,-47,-44,-55,-56,-57,127,-76,-67,-54,-51,133,-76,-49,-50,-53,-76,-52,]),'EQ_EQ':([3,18,62,],[-2,30,82,]),'ELSE':([6,8,14,17,25,26,45,57,63,64,65,68,69,70,72,75,76,84,90,114,117,124,126,131,141,143,],[-6,-76,-76,-5,-4,-9,-7,-34,-32,-28,-35,-29,-30,-33,-76,-31,-36,-27,-40,-76,-38,-76,-39,137,-74,-62,]),'WHILE':([6,8,14,17,25,26,45,51,54,57,63,65,68,69,70,72,75,76,90,114,115,117,124,125,126,137,140,141,143,144,],[-6,-76,-76,-5,-4,-9,-7,-76,67,-34,-32,-35,-29,-30,-33,67,-31,-36,-40,-76,-76,-38,67,67,-39,-66,-76,-74,-62,67,]),'L_EQ':([3,87,91,100,101,102,104,105,106,127,133,],[-2,-41,107,-48,-47,-44,-55,-56,-57,-54,-49,]),'EQ':([3,87,91,100,101,102,104,105,106,127,133,],[-2,-41,109,-48,-47,-44,-55,-56,-57,-54,-49,]),'END':([5,6,8,12,13,14,17,20,23,24,25,26,35,45,51,53,54,56,57,63,64,65,68,69,70,72,74,75,76,84,90,117,126,141,143,],[-76,-6,-76,19,-76,-76,-5,-3,-23,-76,-4,-9,-22,-7,-76,56,-76,-24,-34,-32,-28,-35,-29,-30,-33,-76,-26,-31,-36,-27,-40,-38,-39,-74,-62,]),'R_EQ':([3,87,91,100,101,102,104,105,106,127,133,],[-2,-41,111,-48,-47,-44,-55,-56,-57,-54,-49,]),'VOID':([21,],[32,]),'WRITE':([6,8,14,17,25,26,45,51,54,57,63,65,68,69,70,72,75,76,90,114,115,117,124,125,126,137,140,141,143,144,],[-6,-76,-76,-5,-4,-9,-7,-76,73,-34,-32,-35,-29,-30,-33,73,-31,-36,-40,-76,-76,-38,73,73,-39,-66,-76,-74,-62,73,]),'L_PAR':([3,22,39,59,60,61,66,67,71,73,78,79,81,82,83,88,89,97,98,99,103,104,107,108,109,110,111,112,113,118,119,120,122,128,136,],[-2,34,-25,77,-76,81,83,-75,-63,85,-76,-43,-76,-76,-76,-46,103,-58,-59,-42,-76,122,-72,-76,-70,-69,-73,-68,-71,-60,-61,-45,-76,-43,-76,]),'N_EQ':([3,87,91,100,101,102,104,105,106,127,133,],[-2,-41,113,-48,-47,-44,-55,-56,-57,-54,-49,]),'PLUS':([3,87,100,101,102,104,105,106,127,133,],[-2,97,-48,-47,-44,-55,-56,-57,-54,-49,]),'$end':([2,19,],[0,-1,]),'MINUS':([3,87,100,101,102,104,105,106,127,133,],[-2,98,-48,-47,-44,-55,-56,-57,-54,-49,]),'SEMI':([3,15,16,27,29,36,37,38,44,58,80,87,93,96,100,101,102,104,105,106,116,127,133,],[-2,26,-76,-14,-16,-76,45,-8,-15,76,90,-41,-37,117,-48,-47,-44,-55,-56,-57,126,-54,-49,]),'INTLITERAL':([60,78,79,81,82,83,88,89,97,98,99,103,107,108,109,110,111,112,113,118,119,120,122,128,136,],[-76,-76,-43,-76,-76,-76,-46,105,-58,-59,-42,-76,-72,-76,-70,-69,-73,-68,-71,-60,-61,-45,-76,-43,-76,]),'FLOAT':([5,8,14,21,26,34,45,50,51,114,115,137,140,],[10,10,10,10,-9,10,-7,10,10,10,10,-66,10,]),'PROGRAM':([0,],[1,]),'INT':([5,8,14,21,26,34,45,50,51,114,115,137,140,],[9,9,9,9,-9,9,-7,9,9,9,9,-66,9,]),'FLOATLITERAL':([60,78,79,81,82,83,88,89,97,98,99,103,107,108,109,110,111,112,113,118,119,120,122,128,136,],[-76,-76,-43,-76,-76,-76,-46,106,-58,-59,-42,-76,-72,-76,-70,-69,-73,-68,-71,-60,-61,-45,-76,-43,-76,]),'LESS':([3,87,91,100,101,102,104,105,106,127,133,],[-2,-41,112,-48,-47,-44,-55,-56,-57,-54,-49,]),'STRING':([5,8,14,26,45,51,114,115,137,140,],[11,11,11,-9,-7,11,11,11,-66,11,]),'IDENTIFIER':([1,6,7,8,9,10,11,14,17,25,26,28,31,32,33,40,45,51,54,57,60,63,65,68,69,70,72,75,76,77,78,79,81,82,83,85,88,89,90,97,98,99,103,107,108,109,110,111,112,113,114,115,117,118,119,120,122,124,125,126,128,136,137,140,141,143,144,],[3,-6,3,-76,-11,-10,3,-76,-5,-4,-9,3,-12,-13,3,3,-7,-76,3,-34,-76,-32,-35,-29,-30,-33,3,-31,-36,3,-76,-43,-76,-76,-76,3,-46,3,-40,-58,-59,-42,-76,-72,-76,-70,-69,-73,-68,-71,-76,-76,-38,-60,-61,-45,-76,3,3,-39,-43,-76,-66,-76,-74,-62,3,]),'BEGIN':([3,4,47,],[-2,5,51,]),'DIV':([3,100,101,102,104,105,106,127,133,],[-2,-48,-47,119,-55,-56,-57,-54,-49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func_body':([51,],[53,]),'addop':([87,],[99,]),'program':([0,],[2,]),'s_if':([54,72,124,125,144,],[61,61,61,61,61,]),'write_stmt':([54,72,124,125,144,],[57,57,57,57,57,]),'cond':([81,83,],[92,94,]),'var_decl':([5,8,14,51,114,115,140,],[8,8,8,8,8,8,8,]),'empty':([5,8,13,14,16,24,34,36,42,51,52,54,60,72,78,81,82,83,103,108,114,115,122,124,125,130,131,136,140,142,144,],[6,6,23,6,29,23,43,29,49,6,49,64,79,64,88,79,79,79,79,79,6,6,128,64,64,135,138,79,6,135,64,]),'return_stmt':([54,72,124,125,144,],[65,65,65,65,65,]),'if_stmt':([54,72,124,125,144,],[69,69,69,69,69,]),'else_part':([131,],[139,]),'s_while':([54,72,124,125,144,],[66,66,66,66,66,]),'string_decl':([5,8,14,51,114,115,140,],[14,14,14,14,14,14,14,]),'expr_list_tail':([130,142,],[134,145,]),'pgm_body':([5,],[12,]),'mulop':([102,],[120,]),'postfix_expr':([89,],[102,]),'expr_list':([122,],[129,]),'call_expr':([89,],[100,]),'read_stmt':([54,72,124,125,144,],[70,70,70,70,70,]),'func_decl':([13,24,],[24,24,]),'stmt':([54,72,124,125,144,],[72,72,72,72,72,]),'factor_prefix':([78,],[89,]),'compop':([91,],[108,]),'assign_expr':([54,72,124,125,144,],[58,58,58,58,58,]),'primary':([89,],[101,]),'s_else':([131,],[140,]),'id_list':([7,77,85,],[15,86,95,]),'var_type':([5,8,14,21,34,50,51,114,115,140,],[7,7,7,31,40,40,7,7,7,7,]),'id':([1,7,11,28,33,40,54,72,77,85,89,124,125,144,],[4,16,18,36,39,46,62,62,16,16,104,62,62,62,]),'expr_prefix':([60,81,82,83,103,108,122,136,],[78,78,78,78,78,78,78,78,]),'assign_stmt':([54,72,124,125,144,],[63,63,63,63,63,]),'id_tail':([16,36,],[27,44,]),'any_type':([21,],[33,]),'decl':([5,8,14,51,114,115,140,],[13,17,25,54,124,125,144,]),'func_declarations':([13,24,],[20,35,]),'factor':([78,],[87,]),'s_func':([13,24,],[22,22,]),'expr':([60,81,82,83,103,108,122,136,],[80,91,93,91,121,123,130,142,]),'param_decl_list':([34,],[41,]),'str':([30,],[37,]),'param_decl':([34,50,],[42,52,]),'base_stmt':([54,72,124,125,144,],[68,68,68,68,68,]),'while_stmt':([54,72,124,125,144,],[75,75,75,75,75,]),'param_decl_tail':([42,52,],[48,55,]),'stmt_list':([54,72,124,125,144,],[74,84,131,132,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM id BEGIN pgm_body END','program',5,'p_program','parser.py',18),
  ('id -> IDENTIFIER','id',1,'p_id','parser.py',21),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_pgm_body','parser.py',25),
  ('decl -> string_decl decl','decl',2,'p_decl','parser.py',28),
  ('decl -> var_decl decl','decl',2,'p_decl','parser.py',29),
  ('decl -> empty','decl',1,'p_decl','parser.py',30),
  ('string_decl -> STRING id EQ_EQ str SEMI','string_decl',5,'p_string_decl','parser.py',33),
  ('str -> STRINGLITERAL','str',1,'p_str','parser.py',37),
  ('var_decl -> var_type id_list SEMI','var_decl',3,'p_var_decl','parser.py',40),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',44),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',45),
  ('any_type -> var_type','any_type',1,'p_any_type','parser.py',49),
  ('any_type -> VOID','any_type',1,'p_any_type','parser.py',50),
  ('id_list -> id id_tail','id_list',2,'p_id_list','parser.py',53),
  ('id_tail -> COMM id id_tail','id_tail',3,'p_id_tail','parser.py',58),
  ('id_tail -> empty','id_tail',1,'p_id_tail','parser.py',59),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','parser.py',66),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','parser.py',67),
  ('param_decl -> var_type id','param_decl',2,'p_param_decl','parser.py',70),
  ('param_decl_tail -> COMM param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','parser.py',74),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','parser.py',75),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','parser.py',78),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','parser.py',79),
  ('func_decl -> s_func L_PAR param_decl_list R_PAR BEGIN func_body END','func_decl',7,'p_func_decl','parser.py',82),
  ('s_func -> FUNCTION any_type id','s_func',3,'p_s_func','parser.py',87),
  ('func_body -> decl stmt_list','func_body',2,'p_func_body','parser.py',91),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',98),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',99),
  ('stmt -> base_stmt','stmt',1,'p_stmt','parser.py',111),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',112),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',113),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','parser.py',117),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','parser.py',118),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','parser.py',119),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','parser.py',120),
  ('assign_stmt -> assign_expr SEMI','assign_stmt',2,'p_assign_stmt','parser.py',124),
  ('assign_expr -> id EQ_EQ expr','assign_expr',3,'p_assign_expr','parser.py',127),
  ('read_stmt -> READ L_PAR id_list R_PAR SEMI','read_stmt',5,'p_read_stmt','parser.py',135),
  ('write_stmt -> WRITE L_PAR id_list R_PAR SEMI','write_stmt',5,'p_write_stmt','parser.py',139),
  ('return_stmt -> RETURN expr SEMI','return_stmt',3,'p_return_stmt','parser.py',142),
  ('expr -> expr_prefix factor','expr',2,'p_expr','parser.py',145),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','parser.py',153),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','parser.py',154),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','parser.py',163),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','parser.py',170),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','parser.py',171),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','parser.py',180),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','parser.py',181),
  ('call_expr -> id L_PAR expr_list R_PAR','call_expr',4,'p_call_expr','parser.py',185),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','parser.py',188),
  ('expr_list -> empty','expr_list',1,'p_expr_list','parser.py',189),
  ('expr_list_tail -> COMM expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','parser.py',192),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','parser.py',193),
  ('primary -> L_PAR expr R_PAR','primary',3,'p_primary','parser.py',196),
  ('primary -> id','primary',1,'p_primary','parser.py',197),
  ('primary -> INTLITERAL','primary',1,'p_primary','parser.py',198),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','parser.py',199),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',206),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',207),
  ('mulop -> MULT','mulop',1,'p_mulop','parser.py',211),
  ('mulop -> DIV','mulop',1,'p_mulop','parser.py',212),
  ('if_stmt -> s_if L_PAR cond R_PAR decl stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','parser.py',216),
  ('s_if -> IF','s_if',1,'p_s_if','parser.py',226),
  ('else_part -> s_else decl stmt_list','else_part',3,'p_else_part','parser.py',230),
  ('else_part -> empty','else_part',1,'p_else_part','parser.py',231),
  ('s_else -> ELSE','s_else',1,'p_s_else','parser.py',239),
  ('cond -> expr compop expr','cond',3,'p_cond','parser.py',243),
  ('compop -> LESS','compop',1,'p_compop','parser.py',247),
  ('compop -> MORE','compop',1,'p_compop','parser.py',248),
  ('compop -> EQ','compop',1,'p_compop','parser.py',249),
  ('compop -> N_EQ','compop',1,'p_compop','parser.py',250),
  ('compop -> L_EQ','compop',1,'p_compop','parser.py',251),
  ('compop -> R_EQ','compop',1,'p_compop','parser.py',252),
  ('while_stmt -> s_while L_PAR cond R_PAR decl stmt_list ENDWHILE','while_stmt',7,'p_while_stmt','parser.py',256),
  ('s_while -> WHILE','s_while',1,'p_s_while','parser.py',267),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',271),
]
