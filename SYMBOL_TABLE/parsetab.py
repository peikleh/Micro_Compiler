
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'A85F6183D532FD7D86B290B6BD589F30'
    
_lr_action_items = {'IDENTIFIER':([2,5,6,7,8,9,11,13,14,17,24,27,29,30,31,37,42,49,52,54,55,57,58,63,64,68,69,70,71,73,74,75,76,77,78,79,81,82,84,91,92,93,99,102,103,104,105,106,107,108,109,111,112,113,114,116,117,118,120,121,124,129,134,135,137,138,],[3,-70,16,-9,-70,18,-5,-8,-3,-4,-7,33,35,-11,-10,-6,47,-70,67,-32,-70,-31,-29,-26,-28,-30,-27,67,-40,-70,16,-33,-70,16,-70,-70,-37,-43,100,-55,-56,-39,-70,-70,-67,-68,-64,-66,-70,-65,-63,-70,-58,-42,-57,-70,-35,67,-36,67,-40,-70,-70,-69,-59,67,]),'RETURN':([5,8,11,14,17,24,37,49,52,54,57,58,63,64,68,69,70,75,81,102,111,117,118,120,121,134,135,137,138,],[-70,-70,-5,-3,-4,-7,-6,-70,55,-32,-31,-29,-26,-28,-30,-27,55,-33,-37,-70,-70,-35,55,-36,55,-70,-69,-59,55,]),'ELSE':([5,8,11,14,17,24,37,54,57,58,60,63,64,68,69,70,75,80,81,102,117,118,120,126,135,137,],[-70,-70,-5,-3,-4,-7,-6,-32,-31,-29,-25,-26,-28,-30,-27,-70,-33,-24,-37,-70,-35,-70,-36,134,-69,-59,]),'READ':([5,8,11,14,17,24,37,49,52,54,57,58,63,64,68,69,70,75,81,102,111,117,118,120,121,134,135,137,138,],[-70,-70,-5,-3,-4,-7,-6,-70,56,-32,-31,-29,-26,-28,-30,-27,56,-33,-37,-70,-70,-35,56,-36,56,-70,-69,-59,56,]),'INT':([4,5,8,21,24,37,38,45,49,102,111,134,],[7,7,7,7,-7,-6,7,7,7,7,7,7,]),'INTLITERAL':([55,71,73,76,78,79,82,84,91,92,93,99,103,104,105,106,107,108,109,112,113,114,116,124,129,],[-70,-40,-70,-70,-70,-70,-43,94,-55,-56,-39,-70,-67,-68,-64,-66,-70,-65,-63,-58,-42,-57,-70,-40,-70,]),'MORE':([83,87,94,95,96,97,98,100,122,131,],[-38,105,-53,-54,-45,-44,-41,-52,-51,-46,]),'ENDIF':([5,8,11,14,17,24,37,54,57,58,60,63,64,68,69,70,75,80,81,102,117,118,120,126,132,133,134,135,137,138,140,],[-70,-70,-5,-3,-4,-7,-6,-32,-31,-29,-25,-26,-28,-30,-27,-70,-33,-24,-37,-70,-35,-70,-36,-70,137,-61,-70,-69,-59,-70,-60,]),'STRING':([4,5,8,24,37,49,102,111,134,],[9,9,9,-7,-6,9,9,9,9,]),'$end':([1,19,],[0,-1,]),'MULT':([94,95,96,97,98,100,122,131,],[-53,-54,-45,-44,114,-52,-51,-46,]),'DIV':([94,95,96,97,98,100,122,131,],[-53,-54,-45,-44,112,-52,-51,-46,]),'R_PAR':([16,25,26,33,36,38,39,40,41,43,44,47,48,50,83,85,86,88,89,94,95,96,97,98,100,115,116,119,122,123,124,125,128,130,131,136,139,],[-70,-12,-14,-70,-13,-70,-70,46,-16,-19,-15,-17,-70,-18,-38,101,102,110,111,-53,-54,-45,-44,-41,-52,122,-70,-62,-51,-70,-48,131,-50,-47,-46,-70,-49,]),'EQ_EQ':([18,67,],[28,79,]),'WHILE':([5,8,11,14,17,24,37,49,52,54,57,58,63,64,68,69,70,75,81,102,111,117,118,120,121,134,135,137,138,],[-70,-70,-5,-3,-4,-7,-6,-70,66,-32,-31,-29,-26,-28,-30,-27,66,-33,-37,-70,-70,-35,66,-36,66,-70,-69,-59,66,]),'COMM':([16,33,39,47,48,83,94,95,96,97,98,100,122,123,131,136,],[27,27,45,-17,45,-38,-53,-54,-45,-44,-41,-52,-51,129,-46,129,]),'PROGRAM':([0,],[2,]),'ENDWHILE':([5,8,11,14,17,24,37,54,57,58,60,63,64,68,69,70,75,80,81,111,117,120,121,127,135,137,],[-70,-70,-5,-3,-4,-7,-6,-32,-31,-29,-25,-26,-28,-30,-27,-70,-33,-24,-37,-70,-35,-36,-70,135,-69,-59,]),'MINUS':([83,94,95,96,97,98,100,122,131,],[92,-53,-54,-45,-44,-41,-52,-51,-46,]),'IF':([5,8,11,14,17,24,37,49,52,54,57,58,63,64,68,69,70,75,81,102,111,117,118,120,121,134,135,137,138,],[-70,-70,-5,-3,-4,-7,-6,-70,62,-32,-31,-29,-26,-28,-30,-27,62,-33,-37,-70,-70,-35,62,-36,62,-70,-69,-59,62,]),'L_EQ':([83,87,94,95,96,97,98,100,122,131,],[-38,103,-53,-54,-45,-44,-41,-52,-51,-46,]),'R_EQ':([83,87,94,95,96,97,98,100,122,131,],[-38,104,-53,-54,-45,-44,-41,-52,-51,-46,]),'SEMI':([15,16,25,26,33,34,36,59,72,83,90,94,95,96,97,98,100,101,110,122,131,],[24,-70,-12,-14,-70,37,-13,75,81,-38,-34,-53,-54,-45,-44,-41,-52,117,120,-51,-46,]),'PLUS':([83,94,95,96,97,98,100,122,131,],[91,-53,-54,-45,-44,-41,-52,-51,-46,]),'N_EQ':([83,87,94,95,96,97,98,100,122,131,],[-38,106,-53,-54,-45,-44,-41,-52,-51,-46,]),'STRINGLITERAL':([28,],[34,]),'END':([4,5,8,10,11,12,14,17,20,22,23,24,32,37,49,51,52,53,54,57,58,60,61,63,64,68,69,70,75,80,81,117,120,135,137,],[-70,-70,-70,19,-5,-70,-3,-4,-2,-21,-70,-7,-20,-6,-70,53,-70,-22,-32,-31,-29,-25,-23,-26,-28,-30,-27,-70,-33,-24,-37,-35,-36,-69,-59,]),'BEGIN':([3,46,],[4,49,]),'VOID':([21,],[30,]),'EQ':([83,87,94,95,96,97,98,100,122,131,],[-38,108,-53,-54,-45,-44,-41,-52,-51,-46,]),'FLOATLITERAL':([55,71,73,76,78,79,82,84,91,92,93,99,103,104,105,106,107,108,109,112,113,114,116,124,129,],[-70,-40,-70,-70,-70,-70,-43,95,-55,-56,-39,-70,-67,-68,-64,-66,-70,-65,-63,-58,-42,-57,-70,-40,-70,]),'WRITE':([5,8,11,14,17,24,37,49,52,54,57,58,63,64,68,69,70,75,81,102,111,117,118,120,121,134,135,137,138,],[-70,-70,-5,-3,-4,-7,-6,-70,65,-32,-31,-29,-26,-28,-30,-27,65,-33,-37,-70,-70,-35,65,-36,65,-70,-69,-59,65,]),'L_PAR':([35,55,56,62,65,66,71,73,76,78,79,82,84,91,92,93,99,100,103,104,105,106,107,108,109,112,113,114,116,124,129,],[38,-70,74,76,77,78,-40,-70,-70,-70,-70,-43,99,-55,-56,-39,-70,116,-67,-68,-64,-66,-70,-65,-63,-58,-42,-57,-70,-40,-70,]),'FLOAT':([4,5,8,21,24,37,38,45,49,102,111,134,],[13,13,13,13,-7,-6,13,13,13,13,13,13,]),'LESS':([83,87,94,95,96,97,98,100,122,131,],[-38,109,-53,-54,-45,-44,-41,-52,-51,-46,]),'FUNCTION':([4,5,8,11,12,14,17,23,24,37,53,],[-70,-70,-70,-5,21,-3,-4,21,-7,-6,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'string_decl':([4,5,8,49,102,111,134,],[5,5,5,5,5,5,5,]),'param_decl':([38,45,],[39,48,]),'return_stmt':([52,70,118,121,138,],[54,54,54,54,54,]),'var_type':([4,5,8,21,38,45,49,102,111,134,],[6,6,6,31,42,42,6,6,6,6,]),'param_decl_tail':([39,48,],[44,50,]),'cond':([76,78,],[86,89,]),'factor_prefix':([73,],[84,]),'compop':([87,],[107,]),'any_type':([21,],[29,]),'write_stmt':([52,70,118,121,138,],[57,57,57,57,57,]),'factor':([73,],[83,]),'assign_stmt':([52,70,118,121,138,],[58,58,58,58,58,]),'else_part':([126,],[132,]),'assign_expr':([52,70,118,121,138,],[59,59,59,59,59,]),'stmt':([52,70,118,121,138,],[70,70,70,70,70,]),'empty':([4,5,8,12,16,23,33,38,39,48,49,52,55,70,73,76,78,79,99,102,107,111,116,118,121,123,126,129,134,136,138,],[11,11,11,22,26,22,26,41,43,43,11,60,71,60,82,71,71,71,71,11,71,11,124,60,60,128,133,71,11,128,60,]),'postfix_expr':([84,],[98,]),'while_stmt':([52,70,118,121,138,],[64,64,64,64,64,]),'stmt_list':([52,70,118,121,138,],[61,80,126,127,140,]),'call_expr':([84,],[96,]),'base_stmt':([52,70,118,121,138,],[63,63,63,63,63,]),'param_decl_list':([38,],[40,]),'func_body':([49,],[51,]),'addop':([83,],[93,]),'id_list':([6,74,77,],[15,85,88,]),'func_declarations':([12,23,],[20,32,]),'expr':([55,76,78,79,99,107,116,129,],[72,87,87,90,115,119,123,136,]),'var_decl':([4,5,8,49,102,111,134,],[8,8,8,8,8,8,8,]),'primary':([84,],[97,]),'expr_list':([116,],[125,]),'program':([0,],[1,]),'mulop':([98,],[113,]),'pgm_body':([4,],[10,]),'expr_list_tail':([123,136,],[130,139,]),'id_tail':([16,33,],[25,36,]),'decl':([4,5,8,49,102,111,134,],[12,14,17,52,118,121,138,]),'expr_prefix':([55,76,78,79,99,107,116,129,],[73,73,73,73,73,73,73,73,]),'read_stmt':([52,70,118,121,138,],[68,68,68,68,68,]),'if_stmt':([52,70,118,121,138,],[69,69,69,69,69,]),'func_decl':([12,23,],[23,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER BEGIN pgm_body END','program',5,'p_program','parser.py',76),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_pgm_body','parser.py',85),
  ('decl -> string_decl decl','decl',2,'p_decl','parser.py',88),
  ('decl -> var_decl decl','decl',2,'p_decl','parser.py',89),
  ('decl -> empty','decl',1,'p_decl','parser.py',90),
  ('string_decl -> STRING IDENTIFIER EQ_EQ STRINGLITERAL SEMI','string_decl',5,'p_string_decl','parser.py',93),
  ('var_decl -> var_type id_list SEMI','var_decl',3,'p_var_decl','parser.py',98),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',103),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',104),
  ('any_type -> var_type','any_type',1,'p_any_type','parser.py',108),
  ('any_type -> VOID','any_type',1,'p_any_type','parser.py',109),
  ('id_list -> IDENTIFIER id_tail','id_list',2,'p_id_list','parser.py',112),
  ('id_tail -> COMM IDENTIFIER id_tail','id_tail',3,'p_id_tail','parser.py',116),
  ('id_tail -> empty','id_tail',1,'p_id_tail','parser.py',117),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','parser.py',121),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','parser.py',122),
  ('param_decl -> var_type IDENTIFIER','param_decl',2,'p_param_decl','parser.py',125),
  ('param_decl_tail -> COMM param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','parser.py',128),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','parser.py',129),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','parser.py',132),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','parser.py',133),
  ('func_decl -> FUNCTION any_type IDENTIFIER L_PAR param_decl_list R_PAR BEGIN func_body END','func_decl',9,'p_func_decl','parser.py',136),
  ('func_body -> decl stmt_list','func_body',2,'p_func_body','parser.py',140),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',143),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',144),
  ('stmt -> base_stmt','stmt',1,'p_stmt','parser.py',147),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',148),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',149),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','parser.py',152),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','parser.py',153),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','parser.py',154),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','parser.py',155),
  ('assign_stmt -> assign_expr SEMI','assign_stmt',2,'p_assign_stmt','parser.py',158),
  ('assign_expr -> IDENTIFIER EQ_EQ expr','assign_expr',3,'p_assign_expr','parser.py',161),
  ('read_stmt -> READ L_PAR id_list R_PAR SEMI','read_stmt',5,'p_read_stmt','parser.py',164),
  ('write_stmt -> WRITE L_PAR id_list R_PAR SEMI','write_stmt',5,'p_write_stmt','parser.py',167),
  ('return_stmt -> RETURN expr SEMI','return_stmt',3,'p_return_stmt','parser.py',170),
  ('expr -> expr_prefix factor','expr',2,'p_expr','parser.py',173),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','parser.py',176),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','parser.py',177),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','parser.py',180),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','parser.py',183),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','parser.py',184),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','parser.py',187),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','parser.py',188),
  ('call_expr -> IDENTIFIER L_PAR expr_list R_PAR','call_expr',4,'p_call_expr','parser.py',191),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','parser.py',194),
  ('expr_list -> empty','expr_list',1,'p_expr_list','parser.py',195),
  ('expr_list_tail -> COMM expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','parser.py',198),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','parser.py',199),
  ('primary -> L_PAR expr R_PAR','primary',3,'p_primary','parser.py',202),
  ('primary -> IDENTIFIER','primary',1,'p_primary','parser.py',203),
  ('primary -> INTLITERAL','primary',1,'p_primary','parser.py',204),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','parser.py',205),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',208),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',209),
  ('mulop -> MULT','mulop',1,'p_mulop','parser.py',212),
  ('mulop -> DIV','mulop',1,'p_mulop','parser.py',213),
  ('if_stmt -> IF L_PAR cond R_PAR decl stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','parser.py',216),
  ('else_part -> ELSE decl stmt_list','else_part',3,'p_else_part','parser.py',219),
  ('else_part -> empty','else_part',1,'p_else_part','parser.py',220),
  ('cond -> expr compop expr','cond',3,'p_cond','parser.py',223),
  ('compop -> LESS','compop',1,'p_compop','parser.py',226),
  ('compop -> MORE','compop',1,'p_compop','parser.py',227),
  ('compop -> EQ','compop',1,'p_compop','parser.py',228),
  ('compop -> N_EQ','compop',1,'p_compop','parser.py',229),
  ('compop -> L_EQ','compop',1,'p_compop','parser.py',230),
  ('compop -> R_EQ','compop',1,'p_compop','parser.py',231),
  ('while_stmt -> WHILE L_PAR cond R_PAR decl stmt_list ENDWHILE','while_stmt',7,'p_while_stmt','parser.py',234),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',237),
]
