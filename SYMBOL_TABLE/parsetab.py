
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '405C026E2718EAA5AC62D96B48A24028'
    
_lr_action_items = {'INTLITERAL':([53,71,73,75,77,79,81,83,95,98,99,100,102,103,104,105,106,107,108,112,113,114,116,125,129,],[-70,-70,-40,-70,-70,-70,91,-43,-70,-39,-55,-56,-63,-70,-68,-67,-66,-65,-64,-57,-58,-42,-70,-40,-70,]),'RETURN':([9,10,12,19,20,29,37,48,50,55,56,58,59,63,64,68,69,76,84,109,110,117,119,120,121,132,133,137,138,],[-70,-70,-5,-4,-3,-7,-6,-70,53,-30,-26,-32,-29,-31,53,-27,-28,-33,-37,-70,-70,-35,53,53,-36,-69,-70,53,-59,]),'LESS':([82,86,91,92,93,94,96,97,122,128,],[-38,102,-53,-41,-45,-44,-52,-54,-51,-46,]),'READ':([9,10,12,19,20,29,37,48,50,55,56,58,59,63,64,68,69,76,84,109,110,117,119,120,121,132,133,137,138,],[-70,-70,-5,-4,-3,-7,-6,-70,54,-30,-26,-32,-29,-31,54,-27,-28,-33,-37,-70,-70,-35,54,54,-36,-69,-70,54,-59,]),'VOID':([14,],[26,]),'STRINGLITERAL':([28,],[34,]),'WHILE':([9,10,12,19,20,29,37,48,50,55,56,58,59,63,64,68,69,76,84,109,110,117,119,120,121,132,133,137,138,],[-70,-70,-5,-4,-3,-7,-6,-70,57,-30,-26,-32,-29,-31,57,-27,-28,-33,-37,-70,-70,-35,57,57,-36,-69,-70,57,-59,]),'PROGRAM':([0,],[2,]),'R_PAR':([22,31,32,35,36,38,40,41,42,43,45,47,49,52,82,85,87,89,90,91,92,93,94,96,97,115,116,118,122,123,124,125,128,130,131,136,139,],[-70,-14,-12,-70,-70,-13,44,-70,-16,-17,-15,-19,-70,-18,-38,101,109,110,111,-53,-41,-45,-44,-52,-54,122,-70,-62,-51,128,-70,-48,-46,-50,-47,-70,-49,]),'DIV':([91,92,93,94,96,97,122,128,],[-53,113,-45,-44,-52,-54,-51,-46,]),'N_EQ':([82,86,91,92,93,94,96,97,122,128,],[-38,106,-53,-41,-45,-44,-52,-54,-51,-46,]),'MINUS':([82,91,92,93,94,96,97,122,128,],[100,-53,-41,-45,-44,-52,-54,-51,-46,]),'MULT':([91,92,93,94,96,97,122,128,],[-53,112,-45,-44,-52,-54,-51,-46,]),'BEGIN':([3,44,],[4,48,]),'SEMI':([21,22,31,32,34,35,38,60,72,82,88,91,92,93,94,96,97,101,111,122,128,],[29,-70,-14,-12,37,-70,-13,76,84,-38,-34,-53,-41,-45,-44,-52,-54,117,121,-51,-46,]),'R_EQ':([82,86,91,92,93,94,96,97,122,128,],[-38,104,-53,-41,-45,-44,-52,-54,-51,-46,]),'PLUS':([82,91,92,93,94,96,97,122,128,],[99,-53,-41,-45,-44,-52,-54,-51,-46,]),'IDENTIFIER':([2,6,7,8,9,10,11,12,19,20,24,25,26,29,30,37,39,48,50,53,55,56,58,59,63,64,68,69,71,73,74,75,76,77,79,80,81,83,84,95,98,99,100,102,103,104,105,106,107,108,109,110,112,113,114,116,117,119,120,121,125,129,132,133,137,138,],[3,18,-9,-8,-70,-70,22,-5,-4,-3,-10,33,-11,-7,35,-6,43,-70,61,-70,-30,-26,-32,-29,-31,61,-27,-28,-70,-40,22,-70,-33,-70,-70,22,96,-43,-37,-70,-39,-55,-56,-63,-70,-68,-67,-66,-65,-64,-70,-70,-57,-58,-42,-70,-35,61,61,-36,-40,-70,-69,-70,61,-59,]),'EQ_EQ':([18,61,],[28,77,]),'$end':([1,23,],[0,-1,]),'FUNCTION':([4,5,9,10,12,15,19,20,29,37,70,],[-70,14,-70,-70,-5,14,-4,-3,-7,-6,-22,]),'END':([4,5,9,10,12,13,15,16,17,19,20,27,29,37,48,50,51,55,56,58,59,62,63,64,66,68,69,70,76,78,84,117,121,132,138,],[-70,-70,-70,-70,-5,23,-70,-2,-21,-4,-3,-20,-7,-6,-70,-70,70,-30,-26,-32,-29,-25,-31,-70,-23,-27,-28,-22,-33,-24,-37,-35,-36,-69,-59,]),'STRING':([4,9,10,29,37,48,109,110,133,],[6,6,6,-7,-6,6,6,6,6,]),'L_EQ':([82,86,91,92,93,94,96,97,122,128,],[-38,105,-53,-41,-45,-44,-52,-54,-51,-46,]),'ELSE':([9,10,12,19,20,29,37,55,56,58,59,62,63,64,68,69,76,78,84,110,117,120,121,127,132,138,],[-70,-70,-5,-4,-3,-7,-6,-30,-26,-32,-29,-25,-31,-70,-27,-28,-33,-24,-37,-70,-35,-70,-36,133,-69,-59,]),'WRITE':([9,10,12,19,20,29,37,48,50,55,56,58,59,63,64,68,69,76,84,109,110,117,119,120,121,132,133,137,138,],[-70,-70,-5,-4,-3,-7,-6,-70,67,-30,-26,-32,-29,-31,67,-27,-28,-33,-37,-70,-70,-35,67,67,-36,-69,-70,67,-59,]),'COMM':([22,35,41,43,49,82,91,92,93,94,96,97,122,124,128,136,],[30,30,46,-17,46,-38,-53,-41,-45,-44,-52,-54,-51,129,-46,129,]),'ENDIF':([9,10,12,19,20,29,37,55,56,58,59,62,63,64,68,69,76,78,84,110,117,120,121,127,132,133,134,135,137,138,140,],[-70,-70,-5,-4,-3,-7,-6,-30,-26,-32,-29,-25,-31,-70,-27,-28,-33,-24,-37,-70,-35,-70,-36,-70,-69,-70,138,-61,-70,-59,-60,]),'EQ':([82,86,91,92,93,94,96,97,122,128,],[-38,107,-53,-41,-45,-44,-52,-54,-51,-46,]),'IF':([9,10,12,19,20,29,37,48,50,55,56,58,59,63,64,68,69,76,84,109,110,117,119,120,121,132,133,137,138,],[-70,-70,-5,-4,-3,-7,-6,-70,65,-30,-26,-32,-29,-31,65,-27,-28,-33,-37,-70,-70,-35,65,65,-36,-69,-70,65,-59,]),'ENDWHILE':([9,10,12,19,20,29,37,55,56,58,59,62,63,64,68,69,76,78,84,109,117,119,121,126,132,138,],[-70,-70,-5,-4,-3,-7,-6,-30,-26,-32,-29,-25,-31,-70,-27,-28,-33,-24,-37,-70,-35,-70,-36,132,-69,-59,]),'INT':([4,9,10,14,29,36,37,46,48,109,110,133,],[7,7,7,7,-7,7,-6,7,7,7,7,7,]),'FLOAT':([4,9,10,14,29,36,37,46,48,109,110,133,],[8,8,8,8,-7,8,-6,8,8,8,8,8,]),'FLOATLITERAL':([53,71,73,75,77,79,81,83,95,98,99,100,102,103,104,105,106,107,108,112,113,114,116,125,129,],[-70,-70,-40,-70,-70,-70,97,-43,-70,-39,-55,-56,-63,-70,-68,-67,-66,-65,-64,-57,-58,-42,-70,-40,-70,]),'L_PAR':([33,53,54,57,65,67,71,73,75,77,79,81,83,95,96,98,99,100,102,103,104,105,106,107,108,112,113,114,116,125,129,],[36,-70,74,75,79,80,-70,-40,-70,-70,-70,95,-43,-70,116,-39,-55,-56,-63,-70,-68,-67,-66,-65,-64,-57,-58,-42,-70,-40,-70,]),'MORE':([82,86,91,92,93,94,96,97,122,128,],[-38,108,-53,-41,-45,-44,-52,-54,-51,-46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([4,9,10,48,109,110,133,],[5,19,20,50,119,120,137,]),'var_type':([4,9,10,14,36,46,48,109,110,133,],[11,11,11,24,39,39,11,11,11,11,]),'expr_list':([116,],[123,]),'param_decl_list':([36,],[40,]),'read_stmt':([50,64,119,120,137,],[55,55,55,55,55,]),'primary':([81,],[94,]),'id_tail':([22,35,],[32,38,]),'id_list':([11,74,80,],[21,85,90,]),'return_stmt':([50,64,119,120,137,],[58,58,58,58,58,]),'string_decl':([4,9,10,48,109,110,133,],[10,10,10,10,10,10,10,]),'expr_list_tail':([124,136,],[131,139,]),'postfix_expr':([81,],[92,]),'factor_prefix':([71,],[81,]),'compop':([86,],[103,]),'assign_stmt':([50,64,119,120,137,],[59,59,59,59,59,]),'param_decl_tail':([41,49,],[45,52,]),'program':([0,],[1,]),'assign_expr':([50,64,119,120,137,],[60,60,60,60,60,]),'factor':([71,],[82,]),'empty':([4,5,9,10,15,22,35,36,41,48,49,50,53,64,71,75,77,79,95,103,109,110,116,119,120,124,127,129,133,136,137,],[12,17,12,12,17,31,31,42,47,12,47,62,73,62,83,73,73,73,73,73,12,12,125,62,62,130,135,73,12,130,62,]),'write_stmt':([50,64,119,120,137,],[63,63,63,63,63,]),'addop':([82,],[98,]),'func_decl':([5,15,],[15,15,]),'call_expr':([81,],[93,]),'stmt':([50,64,119,120,137,],[64,64,64,64,64,]),'func_declarations':([5,15,],[16,27,]),'else_part':([127,],[134,]),'any_type':([14,],[25,]),'param_decl':([36,46,],[41,49,]),'pgm_body':([4,],[13,]),'stmt_list':([50,64,119,120,137,],[66,78,126,127,140,]),'if_stmt':([50,64,119,120,137,],[68,68,68,68,68,]),'base_stmt':([50,64,119,120,137,],[56,56,56,56,56,]),'func_body':([48,],[51,]),'expr':([53,75,77,79,95,103,116,129,],[72,86,88,86,115,118,124,136,]),'expr_prefix':([53,75,77,79,95,103,116,129,],[71,71,71,71,71,71,71,71,]),'var_decl':([4,9,10,48,109,110,133,],[9,9,9,9,9,9,9,]),'while_stmt':([50,64,119,120,137,],[69,69,69,69,69,]),'mulop':([92,],[114,]),'cond':([75,79,],[87,89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER BEGIN pgm_body END','program',5,'p_program','parser.py',29),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_pgm_body','parser.py',38),
  ('decl -> string_decl decl','decl',2,'p_decl','parser.py',41),
  ('decl -> var_decl decl','decl',2,'p_decl','parser.py',42),
  ('decl -> empty','decl',1,'p_decl','parser.py',43),
  ('string_decl -> STRING IDENTIFIER EQ_EQ STRINGLITERAL SEMI','string_decl',5,'p_string_decl','parser.py',46),
  ('var_decl -> var_type id_list SEMI','var_decl',3,'p_var_decl','parser.py',53),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',57),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',58),
  ('any_type -> var_type','any_type',1,'p_any_type','parser.py',63),
  ('any_type -> VOID','any_type',1,'p_any_type','parser.py',64),
  ('id_list -> IDENTIFIER id_tail','id_list',2,'p_id_list','parser.py',67),
  ('id_tail -> COMM IDENTIFIER id_tail','id_tail',3,'p_id_tail','parser.py',70),
  ('id_tail -> empty','id_tail',1,'p_id_tail','parser.py',71),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','parser.py',74),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','parser.py',75),
  ('param_decl -> var_type IDENTIFIER','param_decl',2,'p_param_decl','parser.py',78),
  ('param_decl_tail -> COMM param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','parser.py',81),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','parser.py',82),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','parser.py',85),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','parser.py',86),
  ('func_decl -> FUNCTION any_type IDENTIFIER L_PAR param_decl_list R_PAR BEGIN func_body END','func_decl',9,'p_func_decl','parser.py',89),
  ('func_body -> decl stmt_list','func_body',2,'p_func_body','parser.py',92),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',95),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',96),
  ('stmt -> base_stmt','stmt',1,'p_stmt','parser.py',99),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',100),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',101),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','parser.py',104),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','parser.py',105),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','parser.py',106),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','parser.py',107),
  ('assign_stmt -> assign_expr SEMI','assign_stmt',2,'p_assign_stmt','parser.py',110),
  ('assign_expr -> IDENTIFIER EQ_EQ expr','assign_expr',3,'p_assign_expr','parser.py',113),
  ('read_stmt -> READ L_PAR id_list R_PAR SEMI','read_stmt',5,'p_read_stmt','parser.py',116),
  ('write_stmt -> WRITE L_PAR id_list R_PAR SEMI','write_stmt',5,'p_write_stmt','parser.py',119),
  ('return_stmt -> RETURN expr SEMI','return_stmt',3,'p_return_stmt','parser.py',122),
  ('expr -> expr_prefix factor','expr',2,'p_expr','parser.py',125),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','parser.py',128),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','parser.py',129),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','parser.py',132),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','parser.py',135),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','parser.py',136),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','parser.py',139),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','parser.py',140),
  ('call_expr -> IDENTIFIER L_PAR expr_list R_PAR','call_expr',4,'p_call_expr','parser.py',143),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','parser.py',146),
  ('expr_list -> empty','expr_list',1,'p_expr_list','parser.py',147),
  ('expr_list_tail -> COMM expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','parser.py',150),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','parser.py',151),
  ('primary -> L_PAR expr R_PAR','primary',3,'p_primary','parser.py',154),
  ('primary -> IDENTIFIER','primary',1,'p_primary','parser.py',155),
  ('primary -> INTLITERAL','primary',1,'p_primary','parser.py',156),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','parser.py',157),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',160),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',161),
  ('mulop -> MULT','mulop',1,'p_mulop','parser.py',164),
  ('mulop -> DIV','mulop',1,'p_mulop','parser.py',165),
  ('if_stmt -> IF L_PAR cond R_PAR decl stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','parser.py',168),
  ('else_part -> ELSE decl stmt_list','else_part',3,'p_else_part','parser.py',171),
  ('else_part -> empty','else_part',1,'p_else_part','parser.py',172),
  ('cond -> expr compop expr','cond',3,'p_cond','parser.py',175),
  ('compop -> LESS','compop',1,'p_compop','parser.py',178),
  ('compop -> MORE','compop',1,'p_compop','parser.py',179),
  ('compop -> EQ','compop',1,'p_compop','parser.py',180),
  ('compop -> N_EQ','compop',1,'p_compop','parser.py',181),
  ('compop -> L_EQ','compop',1,'p_compop','parser.py',182),
  ('compop -> R_EQ','compop',1,'p_compop','parser.py',183),
  ('while_stmt -> WHILE L_PAR cond R_PAR decl stmt_list ENDWHILE','while_stmt',7,'p_while_stmt','parser.py',186),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',189),
]
