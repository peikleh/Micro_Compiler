
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D34FB8AD0599E3E7A917150849A3C192'
    
_lr_action_items = {'INTLITERAL':([55,73,75,77,78,81,83,85,97,100,101,102,104,105,106,107,108,109,110,114,115,116,118,127,131,],[-72,-72,-42,-72,-72,-72,93,-45,-72,-41,-57,-58,-65,-72,-70,-69,-68,-67,-66,-59,-60,-44,-72,-42,-72,]),'RETURN':([10,11,13,20,21,30,39,50,52,57,58,60,62,65,66,70,71,79,86,111,112,119,121,122,123,134,135,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,55,-32,-28,-34,-31,-33,55,-29,-30,-35,-39,-72,-72,-37,55,55,-38,-71,-72,55,-61,]),'LESS':([3,84,88,93,94,95,96,98,99,124,130,],[-2,-40,104,-55,-43,-47,-46,-56,-54,-53,-48,]),'READ':([10,11,13,20,21,30,39,50,52,57,58,60,62,65,66,70,71,79,86,111,112,119,121,122,123,134,135,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,56,-32,-28,-34,-31,-33,56,-29,-30,-35,-39,-72,-72,-37,56,56,-38,-71,-72,56,-61,]),'EQ_EQ':([3,19,61,],[-2,29,78,]),'STRINGLITERAL':([29,],[35,]),'WHILE':([10,11,13,20,21,30,39,50,52,57,58,60,62,65,66,70,71,79,86,111,112,119,121,122,123,134,135,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,59,-32,-28,-34,-31,-33,59,-29,-30,-35,-39,-72,-72,-37,59,59,-38,-71,-72,59,-61,]),'PROGRAM':([0,],[2,]),'R_PAR':([3,23,32,33,37,38,40,42,43,44,45,47,49,51,54,84,87,89,91,92,93,94,95,96,98,99,117,118,120,124,125,126,127,130,132,133,138,141,],[-2,-72,-16,-14,-72,-72,-15,46,-72,-18,-19,-17,-21,-72,-20,-40,103,111,112,113,-55,-43,-47,-46,-56,-54,124,-72,-64,-53,130,-72,-50,-48,-52,-49,-72,-51,]),'DIV':([3,93,94,95,96,98,99,124,130,],[-2,-55,115,-47,-46,-56,-54,-53,-48,]),'N_EQ':([3,84,88,93,94,95,96,98,99,124,130,],[-2,-40,108,-55,-43,-47,-46,-56,-54,-53,-48,]),'MINUS':([3,84,93,94,95,96,98,99,124,130,],[-2,102,-55,-43,-47,-46,-56,-54,-53,-48,]),'MULT':([3,93,94,95,96,98,99,124,130,],[-2,-55,114,-47,-46,-56,-54,-53,-48,]),'BEGIN':([3,4,46,],[-2,5,50,]),'SEMI':([3,22,23,32,33,35,36,37,40,63,74,84,90,93,94,95,96,98,99,103,113,124,130,],[-2,30,-72,-16,-14,-8,39,-72,-15,79,86,-40,-36,-55,-43,-47,-46,-56,-54,119,123,-53,-48,]),'R_EQ':([3,84,88,93,94,95,96,98,99,124,130,],[-2,-40,106,-55,-43,-47,-46,-56,-54,-53,-48,]),'PLUS':([3,84,93,94,95,96,98,99,124,130,],[-2,101,-55,-43,-47,-46,-56,-54,-53,-48,]),'IDENTIFIER':([2,7,8,9,10,11,12,13,20,21,25,26,27,30,31,39,41,50,52,55,57,58,60,62,65,66,70,71,73,75,76,77,78,79,81,82,83,85,86,97,100,101,102,104,105,106,107,108,109,110,111,112,114,115,116,118,119,121,122,123,127,131,134,135,139,140,],[3,3,-11,-10,-72,-72,3,-6,-5,-4,-12,-13,3,-9,3,-7,3,-72,3,-72,-32,-28,-34,-31,-33,3,-29,-30,-72,-42,3,-72,-72,-35,-72,3,3,-45,-39,-72,-41,-57,-58,-65,-72,-70,-69,-68,-67,-66,-72,-72,-59,-60,-44,-72,-37,3,3,-38,-42,-72,-71,-72,3,-61,]),'VOID':([15,],[26,]),'$end':([1,24,],[0,-1,]),'FUNCTION':([5,6,10,11,13,16,20,21,30,39,72,],[-72,15,-72,-72,-6,15,-5,-4,-9,-7,-24,]),'END':([5,6,10,11,13,14,16,17,18,20,21,28,30,39,50,52,53,57,58,60,62,64,65,66,68,70,71,72,79,80,86,119,123,134,140,],[-72,-72,-72,-72,-6,24,-72,-3,-23,-5,-4,-22,-9,-7,-72,-72,72,-32,-28,-34,-31,-27,-33,-72,-25,-29,-30,-24,-35,-26,-39,-37,-38,-71,-61,]),'STRING':([5,10,11,30,39,50,111,112,135,],[7,7,7,-9,-7,7,7,7,7,]),'L_EQ':([3,84,88,93,94,95,96,98,99,124,130,],[-2,-40,107,-55,-43,-47,-46,-56,-54,-53,-48,]),'ELSE':([10,11,13,20,21,30,39,57,58,60,62,64,65,66,70,71,79,80,86,112,119,122,123,129,134,140,],[-72,-72,-6,-5,-4,-9,-7,-32,-28,-34,-31,-27,-33,-72,-29,-30,-35,-26,-39,-72,-37,-72,-38,135,-71,-61,]),'WRITE':([10,11,13,20,21,30,39,50,52,57,58,60,62,65,66,70,71,79,86,111,112,119,121,122,123,134,135,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,69,-32,-28,-34,-31,-33,69,-29,-30,-35,-39,-72,-72,-37,69,69,-38,-71,-72,69,-61,]),'COMM':([3,23,37,43,45,51,84,93,94,95,96,98,99,124,126,130,138,],[-2,31,31,48,-19,48,-40,-55,-43,-47,-46,-56,-54,-53,131,-48,131,]),'ENDIF':([10,11,13,20,21,30,39,57,58,60,62,64,65,66,70,71,79,80,86,112,119,122,123,129,134,135,136,137,139,140,142,],[-72,-72,-6,-5,-4,-9,-7,-32,-28,-34,-31,-27,-33,-72,-29,-30,-35,-26,-39,-72,-37,-72,-38,-72,-71,-72,140,-63,-72,-61,-62,]),'EQ':([3,84,88,93,94,95,96,98,99,124,130,],[-2,-40,109,-55,-43,-47,-46,-56,-54,-53,-48,]),'IF':([10,11,13,20,21,30,39,50,52,57,58,60,62,65,66,70,71,79,86,111,112,119,121,122,123,134,135,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,67,-32,-28,-34,-31,-33,67,-29,-30,-35,-39,-72,-72,-37,67,67,-38,-71,-72,67,-61,]),'ENDWHILE':([10,11,13,20,21,30,39,57,58,60,62,64,65,66,70,71,79,80,86,111,119,121,123,128,134,140,],[-72,-72,-6,-5,-4,-9,-7,-32,-28,-34,-31,-27,-33,-72,-29,-30,-35,-26,-39,-72,-37,-72,-38,134,-71,-61,]),'INT':([5,10,11,15,30,38,39,48,50,111,112,135,],[8,8,8,8,-9,8,-7,8,8,8,8,8,]),'FLOAT':([5,10,11,15,30,38,39,48,50,111,112,135,],[9,9,9,9,-9,9,-7,9,9,9,9,9,]),'FLOATLITERAL':([55,73,75,77,78,81,83,85,97,100,101,102,104,105,106,107,108,109,110,114,115,116,118,127,131,],[-72,-72,-42,-72,-72,-72,98,-45,-72,-41,-57,-58,-65,-72,-70,-69,-68,-67,-66,-59,-60,-44,-72,-42,-72,]),'L_PAR':([3,34,55,56,59,67,69,73,75,77,78,81,83,85,97,99,100,101,102,104,105,106,107,108,109,110,114,115,116,118,127,131,],[-2,38,-72,76,77,81,82,-72,-42,-72,-72,-72,97,-45,-72,118,-41,-57,-58,-65,-72,-70,-69,-68,-67,-66,-59,-60,-44,-72,-42,-72,]),'MORE':([3,84,88,93,94,95,96,98,99,124,130,],[-2,-40,110,-55,-43,-47,-46,-56,-54,-53,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([5,10,11,50,111,112,135,],[6,20,21,52,121,122,139,]),'var_type':([5,10,11,15,38,48,50,111,112,135,],[12,12,12,25,41,41,12,12,12,12,]),'expr_list':([118,],[125,]),'param_decl_list':([38,],[42,]),'read_stmt':([52,66,121,122,139,],[57,57,57,57,57,]),'primary':([83,],[96,]),'id_tail':([23,37,],[33,40,]),'id_list':([12,76,82,],[22,87,92,]),'return_stmt':([52,66,121,122,139,],[60,60,60,60,60,]),'string_decl':([5,10,11,50,111,112,135,],[11,11,11,11,11,11,11,]),'expr_list_tail':([126,138,],[133,141,]),'id':([2,7,12,27,31,41,52,66,76,82,83,121,122,139,],[4,19,23,34,37,45,61,61,23,23,99,61,61,61,]),'postfix_expr':([83,],[94,]),'factor_prefix':([73,],[83,]),'compop':([88,],[105,]),'assign_stmt':([52,66,121,122,139,],[62,62,62,62,62,]),'param_decl_tail':([43,51,],[47,54,]),'program':([0,],[1,]),'assign_expr':([52,66,121,122,139,],[63,63,63,63,63,]),'factor':([73,],[84,]),'empty':([5,6,10,11,16,23,37,38,43,50,51,52,55,66,73,77,78,81,97,105,111,112,118,121,122,126,129,131,135,138,139,],[13,18,13,13,18,32,32,44,49,13,49,64,75,64,85,75,75,75,75,75,13,13,127,64,64,132,137,75,13,132,64,]),'write_stmt':([52,66,121,122,139,],[65,65,65,65,65,]),'addop':([84,],[100,]),'func_decl':([6,16,],[16,16,]),'mulop':([94,],[116,]),'call_expr':([83,],[95,]),'stmt':([52,66,121,122,139,],[66,66,66,66,66,]),'func_declarations':([6,16,],[17,28,]),'else_part':([129,],[136,]),'any_type':([15,],[27,]),'param_decl':([38,48,],[43,51,]),'pgm_body':([5,],[14,]),'stmt_list':([52,66,121,122,139,],[68,80,128,129,142,]),'if_stmt':([52,66,121,122,139,],[70,70,70,70,70,]),'base_stmt':([52,66,121,122,139,],[58,58,58,58,58,]),'func_body':([50,],[53,]),'expr':([55,77,78,81,97,105,118,131,],[74,88,90,88,117,120,126,138,]),'expr_prefix':([55,77,78,81,97,105,118,131,],[73,73,73,73,73,73,73,73,]),'var_decl':([5,10,11,50,111,112,135,],[10,10,10,10,10,10,10,]),'while_stmt':([52,66,121,122,139,],[71,71,71,71,71,]),'str':([29,],[36,]),'cond':([77,81,],[89,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM id BEGIN pgm_body END','program',5,'p_program','parser_2.py',13),
  ('id -> IDENTIFIER','id',1,'p_id','parser_2.py',16),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_pgm_body','parser_2.py',19),
  ('decl -> string_decl decl','decl',2,'p_decl','parser_2.py',22),
  ('decl -> var_decl decl','decl',2,'p_decl','parser_2.py',23),
  ('decl -> empty','decl',1,'p_decl','parser_2.py',24),
  ('string_decl -> STRING id EQ_EQ str SEMI','string_decl',5,'p_string_decl','parser_2.py',27),
  ('str -> STRINGLITERAL','str',1,'p_str','parser_2.py',30),
  ('var_decl -> var_type id_list SEMI','var_decl',3,'p_var_decl','parser_2.py',33),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser_2.py',36),
  ('var_type -> INT','var_type',1,'p_var_type','parser_2.py',37),
  ('any_type -> var_type','any_type',1,'p_any_type','parser_2.py',40),
  ('any_type -> VOID','any_type',1,'p_any_type','parser_2.py',41),
  ('id_list -> id id_tail','id_list',2,'p_id_list','parser_2.py',44),
  ('id_tail -> COMM id id_tail','id_tail',3,'p_id_tail','parser_2.py',47),
  ('id_tail -> empty','id_tail',1,'p_id_tail','parser_2.py',48),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','parser_2.py',51),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','parser_2.py',52),
  ('param_decl -> var_type id','param_decl',2,'p_param_decl','parser_2.py',55),
  ('param_decl_tail -> COMM param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','parser_2.py',58),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','parser_2.py',59),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','parser_2.py',62),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','parser_2.py',63),
  ('func_decl -> FUNCTION any_type id L_PAR param_decl_list R_PAR BEGIN func_body END','func_decl',9,'p_func_decl','parser_2.py',66),
  ('func_body -> decl stmt_list','func_body',2,'p_func_body','parser_2.py',69),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser_2.py',72),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser_2.py',73),
  ('stmt -> base_stmt','stmt',1,'p_stmt','parser_2.py',76),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser_2.py',77),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser_2.py',78),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','parser_2.py',81),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','parser_2.py',82),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','parser_2.py',83),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','parser_2.py',84),
  ('assign_stmt -> assign_expr SEMI','assign_stmt',2,'p_assign_stmt','parser_2.py',87),
  ('assign_expr -> id EQ_EQ expr','assign_expr',3,'p_assign_expr','parser_2.py',90),
  ('read_stmt -> READ L_PAR id_list R_PAR SEMI','read_stmt',5,'p_read_stmt','parser_2.py',93),
  ('write_stmt -> WRITE L_PAR id_list R_PAR SEMI','write_stmt',5,'p_write_stmt','parser_2.py',96),
  ('return_stmt -> RETURN expr SEMI','return_stmt',3,'p_return_stmt','parser_2.py',99),
  ('expr -> expr_prefix factor','expr',2,'p_expr','parser_2.py',102),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','parser_2.py',105),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','parser_2.py',106),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','parser_2.py',109),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','parser_2.py',112),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','parser_2.py',113),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','parser_2.py',116),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','parser_2.py',117),
  ('call_expr -> id L_PAR expr_list R_PAR','call_expr',4,'p_call_expr','parser_2.py',120),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','parser_2.py',123),
  ('expr_list -> empty','expr_list',1,'p_expr_list','parser_2.py',124),
  ('expr_list_tail -> COMM expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','parser_2.py',127),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','parser_2.py',128),
  ('primary -> L_PAR expr R_PAR','primary',3,'p_primary','parser_2.py',131),
  ('primary -> id','primary',1,'p_primary','parser_2.py',132),
  ('primary -> INTLITERAL','primary',1,'p_primary','parser_2.py',133),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','parser_2.py',134),
  ('addop -> PLUS','addop',1,'p_addop','parser_2.py',137),
  ('addop -> MINUS','addop',1,'p_addop','parser_2.py',138),
  ('mulop -> MULT','mulop',1,'p_mulop','parser_2.py',141),
  ('mulop -> DIV','mulop',1,'p_mulop','parser_2.py',142),
  ('if_stmt -> IF L_PAR cond R_PAR decl stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','parser_2.py',145),
  ('else_part -> ELSE decl stmt_list','else_part',3,'p_else_part','parser_2.py',148),
  ('else_part -> empty','else_part',1,'p_else_part','parser_2.py',149),
  ('cond -> expr compop expr','cond',3,'p_cond','parser_2.py',152),
  ('compop -> LESS','compop',1,'p_compop','parser_2.py',155),
  ('compop -> MORE','compop',1,'p_compop','parser_2.py',156),
  ('compop -> EQ','compop',1,'p_compop','parser_2.py',157),
  ('compop -> N_EQ','compop',1,'p_compop','parser_2.py',158),
  ('compop -> L_EQ','compop',1,'p_compop','parser_2.py',159),
  ('compop -> R_EQ','compop',1,'p_compop','parser_2.py',160),
  ('while_stmt -> WHILE L_PAR cond R_PAR decl stmt_list ENDWHILE','while_stmt',7,'p_while_stmt','parser_2.py',163),
  ('empty -> <empty>','empty',0,'p_empty','parser_2.py',165),
]
