
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '82B45B07B33A16DBC776A7261DB2C133'
    
_lr_action_items = {'PLUS':([3,88,95,96,97,98,99,100,127,133,],[-2,102,-47,-43,-54,-46,-56,-55,-53,-48,]),'DIV':([3,95,96,97,98,99,100,127,133,],[-2,-47,118,-54,-46,-56,-55,-53,-48,]),'VOID':([16,],[25,]),'$end':([2,23,],[0,-1,]),'STRING':([5,6,14,30,39,50,105,113,137,],[8,8,8,-9,-7,8,8,8,8,]),'LESS':([3,88,91,95,96,97,98,99,100,127,133,],[-2,-40,111,-47,-43,-54,-46,-56,-55,-53,-48,]),'MORE':([3,88,91,95,96,97,98,99,100,127,133,],[-2,-40,112,-47,-43,-54,-46,-56,-55,-53,-48,]),'MULT':([3,95,96,97,98,99,100,127,133,],[-2,-47,116,-54,-46,-56,-55,-53,-48,]),'WRITE':([6,12,14,15,24,30,39,50,52,55,57,58,62,64,65,68,69,73,89,105,113,114,115,121,123,134,137,139,140,],[-72,-6,-72,-5,-4,-9,-7,-72,59,-33,-32,-28,-34,-31,59,-30,-29,-35,-39,-72,-72,-38,-37,59,59,-71,-72,-61,59,]),'COMM':([3,22,37,43,45,51,88,95,96,97,98,99,100,125,127,133,138,],[-2,32,32,47,-19,47,-40,-47,-43,-54,-46,-56,-55,132,-53,-48,132,]),'FLOAT':([5,6,14,16,30,38,39,47,50,105,113,137,],[11,11,11,11,-9,11,-7,11,11,11,11,11,]),'ENDWHILE':([6,12,14,15,24,30,39,55,57,58,60,62,64,65,68,69,73,77,89,105,114,115,121,128,134,139,],[-72,-6,-72,-5,-4,-9,-7,-33,-32,-28,-27,-34,-31,-72,-30,-29,-35,-26,-39,-72,-38,-37,-72,134,-71,-61,]),'PROGRAM':([0,],[1,]),'FLOATLITERAL':([66,75,78,79,81,82,86,87,101,102,103,104,106,107,108,109,110,111,112,116,117,118,119,124,132,],[-72,-72,-42,-72,-72,-72,-45,99,-72,-57,-41,-58,-70,-68,-72,-67,-69,-65,-66,-59,-44,-60,-72,-42,-72,]),'EQ':([3,88,91,95,96,97,98,99,100,127,133,],[-2,-40,109,-47,-43,-54,-46,-56,-55,-53,-48,]),'EQ_EQ':([3,20,61,],[-2,29,75,]),'L_PAR':([3,34,59,63,66,70,71,75,78,79,81,82,86,87,97,101,102,103,104,106,107,108,109,110,111,112,116,117,118,119,124,132,],[-2,38,74,76,-72,81,82,-72,-42,-72,-72,-72,-45,101,119,-72,-57,-41,-58,-70,-68,-72,-67,-69,-65,-66,-59,-44,-60,-72,-42,-72,]),'IDENTIFIER':([1,6,8,9,11,12,13,14,15,24,25,26,27,30,32,39,41,50,52,55,57,58,62,64,65,66,68,69,73,74,75,76,78,79,81,82,86,87,89,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,123,124,132,134,137,139,140,],[3,-72,3,3,-10,-6,-11,-72,-5,-4,-13,-12,3,-9,3,-7,3,-72,3,-33,-32,-28,-34,-31,3,-72,-30,-29,-35,3,-72,3,-42,-72,-72,-72,-45,3,-39,-72,-57,-41,-58,-72,-70,-68,-72,-67,-69,-65,-66,-72,-38,-37,-59,-44,-60,-72,3,3,-42,-72,-71,-72,-61,3,]),'SEMI':([3,21,22,31,33,35,36,37,40,56,80,84,88,93,94,95,96,97,98,99,100,127,133,],[-2,30,-72,-14,-16,-8,39,-72,-15,73,89,-36,-40,114,115,-47,-43,-54,-46,-56,-55,-53,-48,]),'BEGIN':([3,4,46,],[-2,5,50,]),'STRINGLITERAL':([29,],[35,]),'N_EQ':([3,88,91,95,96,97,98,99,100,127,133,],[-2,-40,107,-47,-43,-54,-46,-56,-55,-53,-48,]),'R_PAR':([3,22,31,33,37,38,40,42,43,44,45,48,49,51,54,83,85,88,90,92,95,96,97,98,99,100,119,120,122,124,125,126,127,130,131,133,138,141,],[-2,-72,-14,-16,-72,-72,-15,46,-72,-18,-19,-21,-17,-72,-20,93,94,-40,105,113,-47,-43,-54,-46,-56,-55,-72,127,-64,-50,-72,133,-53,-49,-52,-48,-72,-51,]),'INTLITERAL':([66,75,78,79,81,82,86,87,101,102,103,104,106,107,108,109,110,111,112,116,117,118,119,124,132,],[-72,-72,-42,-72,-72,-72,-45,100,-72,-57,-41,-58,-70,-68,-72,-67,-69,-65,-66,-59,-44,-60,-72,-42,-72,]),'R_EQ':([3,88,91,95,96,97,98,99,100,127,133,],[-2,-40,106,-47,-43,-54,-46,-56,-55,-53,-48,]),'END':([5,6,7,10,12,14,15,17,18,19,24,28,30,39,50,52,53,55,57,58,60,62,64,65,67,68,69,72,73,77,89,114,115,134,139,],[-72,-72,-72,23,-6,-72,-5,-23,-72,-3,-4,-22,-9,-7,-72,-72,72,-33,-32,-28,-27,-34,-31,-72,-25,-30,-29,-24,-35,-26,-39,-38,-37,-71,-61,]),'WHILE':([6,12,14,15,24,30,39,50,52,55,57,58,62,64,65,68,69,73,89,105,113,114,115,121,123,134,137,139,140,],[-72,-6,-72,-5,-4,-9,-7,-72,70,-33,-32,-28,-34,-31,70,-30,-29,-35,-39,-72,-72,-38,-37,70,70,-71,-72,-61,70,]),'RETURN':([6,12,14,15,24,30,39,50,52,55,57,58,62,64,65,68,69,73,89,105,113,114,115,121,123,134,137,139,140,],[-72,-6,-72,-5,-4,-9,-7,-72,66,-33,-32,-28,-34,-31,66,-30,-29,-35,-39,-72,-72,-38,-37,66,66,-71,-72,-61,66,]),'READ':([6,12,14,15,24,30,39,50,52,55,57,58,62,64,65,68,69,73,89,105,113,114,115,121,123,134,137,139,140,],[-72,-6,-72,-5,-4,-9,-7,-72,63,-33,-32,-28,-34,-31,63,-30,-29,-35,-39,-72,-72,-38,-37,63,63,-71,-72,-61,63,]),'MINUS':([3,88,95,96,97,98,99,100,127,133,],[-2,104,-47,-43,-54,-46,-56,-55,-53,-48,]),'ELSE':([6,12,14,15,24,30,39,55,57,58,60,62,64,65,68,69,73,77,89,113,114,115,123,129,134,139,],[-72,-6,-72,-5,-4,-9,-7,-33,-32,-28,-27,-34,-31,-72,-30,-29,-35,-26,-39,-72,-38,-37,-72,137,-71,-61,]),'ENDIF':([6,12,14,15,24,30,39,55,57,58,60,62,64,65,68,69,73,77,89,113,114,115,123,129,134,135,136,137,139,140,142,],[-72,-6,-72,-5,-4,-9,-7,-33,-32,-28,-27,-34,-31,-72,-30,-29,-35,-26,-39,-72,-38,-37,-72,-72,-71,-63,139,-72,-61,-72,-62,]),'FUNCTION':([5,6,7,12,14,15,18,24,30,39,72,],[-72,-72,16,-6,-72,-5,16,-4,-9,-7,-24,]),'L_EQ':([3,88,91,95,96,97,98,99,100,127,133,],[-2,-40,110,-47,-43,-54,-46,-56,-55,-53,-48,]),'INT':([5,6,14,16,30,38,39,47,50,105,113,137,],[13,13,13,13,-9,13,-7,13,13,13,13,13,]),'IF':([6,12,14,15,24,30,39,50,52,55,57,58,62,64,65,68,69,73,89,105,113,114,115,121,123,134,137,139,140,],[-72,-6,-72,-5,-4,-9,-7,-72,71,-33,-32,-28,-34,-31,71,-30,-29,-35,-39,-72,-72,-38,-37,71,71,-71,-72,-61,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'var_decl':([5,6,14,50,105,113,137,],[6,6,6,6,6,6,6,]),'mulop':([96,],[117,]),'assign_expr':([52,65,121,123,140,],[56,56,56,56,56,]),'id_list':([9,74,76,],[21,83,85,]),'str':([29,],[36,]),'read_stmt':([52,65,121,123,140,],[57,57,57,57,57,]),'return_stmt':([52,65,121,123,140,],[62,62,62,62,62,]),'addop':([88,],[103,]),'var_type':([5,6,14,16,38,47,50,105,113,137,],[9,9,9,26,41,41,9,9,9,9,]),'param_decl_list':([38,],[42,]),'param_decl_tail':([43,51,],[49,54,]),'expr_list':([119,],[126,]),'expr_list_tail':([125,138,],[130,141,]),'postfix_expr':([87,],[96,]),'empty':([5,6,7,14,18,22,37,38,43,50,51,52,65,66,75,79,81,82,101,105,108,113,119,121,123,125,129,132,137,138,140,],[12,12,17,12,17,33,33,44,48,12,48,60,60,78,78,86,78,78,78,12,78,12,124,60,60,131,135,78,12,131,60,]),'id_tail':([22,37,],[31,40,]),'id':([1,8,9,27,32,41,52,65,74,76,87,121,123,140,],[4,20,22,34,37,45,61,61,22,22,97,61,61,61,]),'func_decl':([7,18,],[18,18,]),'else_part':([129,],[136,]),'pgm_body':([5,],[10,]),'base_stmt':([52,65,121,123,140,],[58,58,58,58,58,]),'decl':([5,6,14,50,105,113,137,],[7,15,24,52,121,123,140,]),'call_expr':([87,],[95,]),'compop':([91,],[108,]),'func_body':([50,],[53,]),'factor_prefix':([79,],[87,]),'factor':([79,],[88,]),'assign_stmt':([52,65,121,123,140,],[64,64,64,64,64,]),'expr_prefix':([66,75,81,82,101,108,119,132,],[79,79,79,79,79,79,79,79,]),'cond':([81,82,],[90,92,]),'program':([0,],[2,]),'param_decl':([38,47,],[43,51,]),'any_type':([16,],[27,]),'stmt':([52,65,121,123,140,],[65,65,65,65,65,]),'stmt_list':([52,65,121,123,140,],[67,77,128,129,142,]),'primary':([87,],[98,]),'while_stmt':([52,65,121,123,140,],[68,68,68,68,68,]),'if_stmt':([52,65,121,123,140,],[69,69,69,69,69,]),'expr':([66,75,81,82,101,108,119,132,],[80,84,91,91,120,122,125,138,]),'string_decl':([5,6,14,50,105,113,137,],[14,14,14,14,14,14,14,]),'func_declarations':([7,18,],[19,28,]),'write_stmt':([52,65,121,123,140,],[55,55,55,55,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM id BEGIN pgm_body END','program',5,'p_program','parser_2.py',7),
  ('id -> IDENTIFIER','id',1,'p_id','parser_2.py',10),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_pgm_body','parser_2.py',13),
  ('decl -> string_decl decl','decl',2,'p_decl','parser_2.py',16),
  ('decl -> var_decl decl','decl',2,'p_decl','parser_2.py',17),
  ('decl -> empty','decl',1,'p_decl','parser_2.py',18),
  ('string_decl -> STRING id EQ_EQ str SEMI','string_decl',5,'p_string_decl','parser_2.py',21),
  ('str -> STRINGLITERAL','str',1,'p_str','parser_2.py',24),
  ('var_decl -> var_type id_list SEMI','var_decl',3,'p_var_decl','parser_2.py',27),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser_2.py',30),
  ('var_type -> INT','var_type',1,'p_var_type','parser_2.py',31),
  ('any_type -> var_type','any_type',1,'p_any_type','parser_2.py',34),
  ('any_type -> VOID','any_type',1,'p_any_type','parser_2.py',35),
  ('id_list -> id id_tail','id_list',2,'p_id_list','parser_2.py',38),
  ('id_tail -> COMM id id_tail','id_tail',3,'p_id_tail','parser_2.py',41),
  ('id_tail -> empty','id_tail',1,'p_id_tail','parser_2.py',42),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','parser_2.py',45),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','parser_2.py',46),
  ('param_decl -> var_type id','param_decl',2,'p_param_decl','parser_2.py',49),
  ('param_decl_tail -> COMM param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','parser_2.py',52),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','parser_2.py',53),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','parser_2.py',56),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','parser_2.py',57),
  ('func_decl -> FUNCTION any_type id L_PAR param_decl_list R_PAR BEGIN func_body END','func_decl',9,'p_func_decl','parser_2.py',60),
  ('func_body -> decl stmt_list','func_body',2,'p_func_body','parser_2.py',63),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser_2.py',66),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser_2.py',67),
  ('stmt -> base_stmt','stmt',1,'p_stmt','parser_2.py',70),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser_2.py',71),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser_2.py',72),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','parser_2.py',75),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','parser_2.py',76),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','parser_2.py',77),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','parser_2.py',78),
  ('assign_stmt -> assign_expr SEMI','assign_stmt',2,'p_assign_stmt','parser_2.py',81),
  ('assign_expr -> id EQ_EQ expr','assign_expr',3,'p_assign_expr','parser_2.py',84),
  ('read_stmt -> READ L_PAR id_list R_PAR SEMI','read_stmt',5,'p_read_stmt','parser_2.py',87),
  ('write_stmt -> WRITE L_PAR id_list R_PAR SEMI','write_stmt',5,'p_write_stmt','parser_2.py',90),
  ('return_stmt -> RETURN expr SEMI','return_stmt',3,'p_return_stmt','parser_2.py',93),
  ('expr -> expr_prefix factor','expr',2,'p_expr','parser_2.py',96),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','parser_2.py',99),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','parser_2.py',100),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','parser_2.py',103),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','parser_2.py',106),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','parser_2.py',107),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','parser_2.py',110),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','parser_2.py',111),
  ('call_expr -> id L_PAR expr_list R_PAR','call_expr',4,'p_call_expr','parser_2.py',114),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','parser_2.py',117),
  ('expr_list -> empty','expr_list',1,'p_expr_list','parser_2.py',118),
  ('expr_list_tail -> COMM expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','parser_2.py',121),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','parser_2.py',122),
  ('primary -> L_PAR expr R_PAR','primary',3,'p_primary','parser_2.py',125),
  ('primary -> id','primary',1,'p_primary','parser_2.py',126),
  ('primary -> INTLITERAL','primary',1,'p_primary','parser_2.py',127),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','parser_2.py',128),
  ('addop -> PLUS','addop',1,'p_addop','parser_2.py',131),
  ('addop -> MINUS','addop',1,'p_addop','parser_2.py',132),
  ('mulop -> MULT','mulop',1,'p_mulop','parser_2.py',135),
  ('mulop -> DIV','mulop',1,'p_mulop','parser_2.py',136),
  ('if_stmt -> IF L_PAR cond R_PAR decl stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','parser_2.py',139),
  ('else_part -> ELSE decl stmt_list','else_part',3,'p_else_part','parser_2.py',142),
  ('else_part -> empty','else_part',1,'p_else_part','parser_2.py',143),
  ('cond -> expr compop expr','cond',3,'p_cond','parser_2.py',146),
  ('compop -> LESS','compop',1,'p_compop','parser_2.py',149),
  ('compop -> MORE','compop',1,'p_compop','parser_2.py',150),
  ('compop -> EQ','compop',1,'p_compop','parser_2.py',151),
  ('compop -> N_EQ','compop',1,'p_compop','parser_2.py',152),
  ('compop -> L_EQ','compop',1,'p_compop','parser_2.py',153),
  ('compop -> R_EQ','compop',1,'p_compop','parser_2.py',154),
  ('while_stmt -> WHILE L_PAR cond R_PAR decl stmt_list ENDWHILE','while_stmt',7,'p_while_stmt','parser_2.py',157),
  ('empty -> <empty>','empty',0,'p_empty','parser_2.py',159),
]
